ggplot() +
geom_bar(aes(x = factor(fac_fdr))) +
scale_x_discrete(limits = rev(levels(factor(fac_fdr))))
dat %>%
ggplot() +
geom_bar(aes(x = factor(fac_fdr))) +
scale_x_discrete()
?scale_x_discrete
dat %>%
filter(county_name == "KINGS") %>%
mutate(fdr_fac = forcats::fct_infreq(str_to_title(fac_fdr)) %>% fct_lump_n(5)) %>%
ggplot() +
geom_bar(aes(x = reorder(fdr_fac, desc(fdr_fac)))) +
coord_flip()
dat %>%
filter(county_name == "KINGS") %>%
mutate(fdr_fac = forcats::fct_infreq(str_to_title(fac_fdr)) %>% fct_lump_n(5)) %>%
ggplot() +
geom_bar(aes(x = reorder(fdr_fac, desc(fdr_fac)))) +
coord_flip() +
theme(axis.title.x = element_blank())
dat %>%
filter(county_name == "KINGS") %>%
mutate(fdr_fac = forcats::fct_infreq(str_to_title(fac_fdr)) %>% fct_lump_n(5)) %>%
ggplot() +
geom_bar(aes(x = reorder(fdr_fac, desc(fdr_fac)))) +
coord_flip() +
theme(axis.title.y = element_blank())
dat %>%
filter(county_name == "KINGS") %>%
mutate(fdr_fac = forcats::fct_infreq(str_to_title(fac_fdr)) %>% fct_lump_n(5)) %>%
ggplot() +
geom_bar(aes(x = reorder(fdr_fac, desc(fdr_fac)))) +
coord_flip() +
labs(x = "Number of Facilities") +
theme(axis.title.y = element_blank())
dat %>%
filter(county_name == "KINGS") %>%
mutate(fdr_fac = forcats::fct_infreq(
str_to_title(fac_fdr)
) %>%
fct_lump_n(5)) %>%
ggplot() +
geom_bar(aes(x = reorder(fdr_fac, desc(fdr_fac)))) +
coord_flip() +
labs(x = "Number of Facilities") +
theme(axis.title.y = element_blank())
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(county_sf)
county_sf <- st_read(dsn = "data", layer = "county_borders")
st_crs(county_sf) # 4326
View(county_sf)
county_sf %>% filter(name == str_to_title("LOS ANGELES"))
runApp()
runApp()
?clearShapes
?addPolygons
runApp()
?clearShapes
runApp()
runApp()
install.packages("bslib")
install.packages("bslib")
library(bslib)
bslib::bs_theme_preview()
library(bslib)
bslib::bs_theme_preview()
bslib::bs_theme_preview
install.packages("bsicons")
bslib::bs_theme_preview()
runApp()
?bs_theme
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?addProviderTiles
runApp()
runApp()
runApp()
runApp()
runApp()
?ggplotly
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
fontquiver::font_faces("sans")
fontquiver::font_faces()
fontquiver::font_faces(fontset = "sans")
runApp()
?DT::DTOutput
install.packages("thematic")
runApp()
runApp()
runApp()
?plotlyOutput
runApp()
?leafletOutput
?plotlyOutput
runApp()
runApp()
runApp()
?hr
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?leafletOutput
runApp()
?column
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?ggplot2::theme
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("reactable")
library(reactable)
runApp()
runApp()
colors()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?panel.background
??panel.background
?theme
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
dat <- read_excel("health_facility_locations.xlsx") %>%
clean_names()
colnames(dat)
runApp()
runApp()
runApp()
runApp()
?addPolygons
runApp()
runApp()
runApp()
?tabPanel
runApp()
runApp()
runApp()
?rename
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?renderDataTable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinydashboard")
library(shinydashboard)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source("~/R/Projects/cleaning_sample/facilities-cleaning.R", echo=TRUE)
shiny::runApp()
rm(list = ls())
runApp()
runApp()
shiny::runApp()
dat <- read_excel("health_facility_locations.xlsx") %>%
clean_names()
str(dat)
dat %>%
ggplot(aes(x = license_expiration_date)) +
geom_density()
lubridate::today()
dat %>%
filter(license_expiration_date < today()) %>%
nrow()
library(readxl)
library(dplyr)
library(stringr)
library(glue)
library(janitor)
library(ggplot2)
# library(rio)
library(lubridate)
library(sf)
library(leaflet)
library(tibble)
library(DT)
dat %>%
filter(license_expiration_date < today()) %>%
nrow()
dat %>%
filter(license_expiration_date < date("2023-06-15")) %>%
nrow()
dat %>%
ggplot(aes(x = license_expiration_date)) +
geom_density()
dat %>%
filter(license_expiration_date > date("2023-06-15")) %>%
group_by(license_expiration_date) %>%
count()
day(date("2023-06-16 00:00:00"))
round_date(date("2023-06-16 00:00:00"))
dat %>%
filter(license_expiration_date > date("2023-06-15")) %>%
group_by(license_expiration_date) %>%
count() %>%
ggplot() +
geom_point(aes(x = license_expiration_date, y = n))
dat %>%
filter(license_expiration_date > date("2023-06-15")) %>%
group_by(license_expiration_date) %>%
count() %>%
ggplot() +
geom_line(aes(x = license_expiration_date, y = n))
install.packages("shinyWidgets")
library(shinyWidgets)
runApp()
?valueBox
runApp()
runApp()
runApp()
runApp()
runApp()
View(dat)
table(dat$licensed_certified)
table(dat$license_status_description)
library(readxl)
library(dplyr)
library(stringr)
library(glue)
library(janitor)
library(ggplot2)
# library(rio)
library(lubridate)
library(sf)
library(leaflet)
library(tibble)
library(DT)
dat$quarter_year <- as.yearqtr(dat$LICENSE_EXPIRATION_DATE)
class(dat$license_expiration_date)
quarter(dat$license_expiration_date)
quarter(dat$license_expiration_date, with_year = T)
dat$quarter_year <- quarter(dat$license_expiration_date, with_year = T)
dat %>%
filter(quarter_year < 2022.1)
dat %>%
filter(quarter_year >= 2022.1)
dat %>%
filter(quarter_year >= 2022.1) %>%
ggplot() +
geom_bar(aes(x = quarter_year))
table(dat$quarter_year)
class(dat$quarter_year)
test_quarter <- "2022.3"
str_extract(test_quarter, "^\\d{4}")
str_extract(test_quarter, "(?<=\\.)\\d")
glue("{str_extract(test_quarter, '^\\d{4}')} Q{str_extract(test_quarter, '(?<=\\.)\\d')}")
year_str <- str_extract(test_quarter, "^\\d{4}")
q_str <- str_extract(test_quarter, "(?<=\\.)\\d")
glue("{year_str} Q{q_str}")
paste0(str_extract(test_quarter, "^\\d{4}"), " Q", str_extract(test_quarter, "(?<=\\.)\\d"))
ggplot() +
geom_bar(aes(x = quarter_year))
dat %>%
filter(quarter_year >= 2022.1) %>%
mutate(quarter_string = paste0(
str_extract(quarter_year, "^\\d{4}"),
" Q",
str_extract(quarter_year, "(?<=\\.)\\d")
)) %>%
ggplot() +
geom_bar(aes(x = quarter_year))
dat %>%
filter(quarter_year >= 2022.1) %>%
mutate(quarter_string = paste0(
str_extract(quarter_year, "^\\d{4}"),
" Q",
str_extract(quarter_year, "(?<=\\.)\\d")
)) %>%
ggplot() +
geom_bar(aes(x = quarter_string))
dat %>%
filter(quarter_year >= 2022.1) %>%
mutate(quarter_string = paste0(
str_extract(quarter_year, "^\\d{4}"),
" Q",
str_extract(quarter_year, "(?<=\\.)\\d")
)) %>%
ggplot() +
geom_bar(aes(x = quarter_string)) +
theme(axis.x.text = element_text(angle = 0.3))
dat %>%
filter(quarter_year >= 2022.1) %>%
mutate(quarter_string = paste0(
str_extract(quarter_year, "^\\d{4}"),
" Q",
str_extract(quarter_year, "(?<=\\.)\\d")
)) %>%
ggplot() +
geom_bar(aes(x = quarter_string)) +
theme(axis.text = element_text(angle = 0.3))
dat %>%
filter(quarter_year >= 2022.1) %>%
mutate(quarter_string = paste0(
str_extract(quarter_year, "^\\d{4}"),
" Q",
str_extract(quarter_year, "(?<=\\.)\\d")
)) %>%
ggplot() +
geom_bar(aes(x = quarter_string)) +
theme(axis.text.x = element_text(angle = 0.3))
dat %>%
filter(quarter_year >= 2022.1) %>%
mutate(quarter_string = paste0(
str_extract(quarter_year, "^\\d{4}"),
" Q",
str_extract(quarter_year, "(?<=\\.)\\d")
)) %>%
ggplot() +
geom_bar(aes(x = quarter_string)) +
theme(axis.text.x = element_text(angle = 0.45))
dat %>%
filter(quarter_year >= 2022.1) %>%
mutate(quarter_string = paste0(
str_extract(quarter_year, "^\\d{4}"),
" Q",
str_extract(quarter_year, "(?<=\\.)\\d")
)) %>%
ggplot() +
geom_bar(aes(x = quarter_string)) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust=1))
dat %>%
filter(quarter_year >= 2022.1) %>%
mutate(quarter_string = paste0(
str_extract(quarter_year, "^\\d{4}"),
" Q",
str_extract(quarter_year, "(?<=\\.)\\d")
)) %>%
ggplot() +
geom_bar(aes(x = quarter_string)) +
theme_minimal() +
labs(y = "Number of Facilities") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.x = element_blank())
dat %>%
filter(quarter_year >= 2022.1) %>%
mutate(quarter_string = paste0(
str_extract(quarter_year, "^\\d{4}"),
" Q",
str_extract(quarter_year, "(?<=\\.)\\d")
)) %>%
ggplot() +
geom_bar(aes(x = quarter_string)) +
theme_minimal() +
labs(y = "Number of Facilities") +
title("License Expiration Date of Health Facilites") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.x = element_blank())
dat %>%
filter(quarter_year >= 2022.1) %>%
mutate(quarter_string = paste0(
str_extract(quarter_year, "^\\d{4}"),
" Q",
str_extract(quarter_year, "(?<=\\.)\\d")
)) %>%
ggplot() +
geom_bar(aes(x = quarter_string)) +
theme_minimal() +
labs(y = "Number of Facilities",
title = "License Expiration Date of Health Facilites") +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
axis.title.x = element_blank())
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?plotlyOutput
runApp()
runApp()
runApp()
runApp()
?tabPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
table(dat$county_name)
dat <- dat %>%
filter(county_name != "CURRY")
table(dat$county_name)
?reactableOutput
?reactable
head(dat)
dat %>% select(county_name, facid) %>% reactable()
runApp()
runApp()
runApp()
runApp()
?reactable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tomato
runApp()
runApp()
runApp()
runApp()
